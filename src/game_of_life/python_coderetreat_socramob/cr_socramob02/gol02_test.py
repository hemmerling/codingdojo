#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol02 import Gol02
from cell import Cell

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol02Test(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testCellCreated(self):
        self.cell = Cell()
        assert self.cell.exist() == True, 'Cell was not created'

    def testCellAddNeighbour(self):
        self.cell = Cell()
        self.cell2 = Cell()
        assert self.cell.add(self.cell2) == self.cell2, 'Cell has no neighbour'

    def testCellNumberOfNeighbours(self):
        self.cell = Cell()
        print self.cell.number_of_neighbours()
        assert self.cell.number_of_neighbours() == 0, 'Cell does not know about its neighbours'

    def testCellNumberOfNeighbours2(self):
        self.cell = Cell()
        self.cell2 = Cell()
        self.cell.add(self.cell2)
        print self.cell.number_of_neighbours()
        assert self.cell.number_of_neighbours() == 1, 'Cell does not know about its neighbours'

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise
