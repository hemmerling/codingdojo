#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol01 import Gol01

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol01Test(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    # 1. Eine tote Zelle mit genau drei lebenden Nachbarn
    # wird in der Folgegeneration neu geboren.
    def test_geburt_mit_3_nachbarn(self):
        self.gol = Gol01()
        anzahl_nachbarn = 3
        self.gol.setze_zelle_auf_tot()
        self.gol.zelle_hat_nachbarn(anzahl_nachbarn)
        result = self.gol.naechste_generation()
        assert result == True, 'Gol01.naechste_generation does not provide the right return value'
        return

    # 2. Lebende Zellen mit weniger als zwei lebenden Nachbarn
    # sterben in der Folgegeneration an Einsamkeit.
    def test_tod_mit_weniger_als_2_nachbarn(self):
        self.gol = Gol01()
        anzahl_nachbarn = 1
        self.gol.setze_zelle_auf_lebendig()
        self.gol.zelle_hat_nachbarn(anzahl_nachbarn)
        result = self.gol.naechste_generation()
        assert result == False, 'Gol01.naechste_generation does not provide the right return value'
        return

    # 3. Eine lebende Zelle mit zwei oder drei lebenden Nachbarn
    # bleibt in der Folgegeneration am Leben.
    def test_lebt_mit_3_oder_2_nachbarn(self):
        self.gol = Gol01()
        anzahl_nachbarn = 2
        self.gol.setze_zelle_auf_lebendig()
        self.gol.zelle_hat_nachbarn(anzahl_nachbarn)
        result = self.gol.naechste_generation()
        assert result == True, 'Gol01.naechste_generation does not provide the right return value'
        return

    # 4. Lebende Zellen mit mehr als drei lebenden Nachbarn
    # sterben in der Folgegeneration an Ueberbevoelkerung.
    def test_stirbt_mit_mehr_als_3_nachbarn(self):
        self.gol = Gol01()
        anzahl_nachbarn = 4
        self.gol.setze_zelle_auf_lebendig()
        self.gol.zelle_hat_nachbarn(anzahl_nachbarn)
        result = self.gol.naechste_generation()
        assert result == False, 'Gol01.naechste_generation does not provide the right return value'
        return

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

