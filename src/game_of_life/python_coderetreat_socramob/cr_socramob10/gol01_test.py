#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol01 import Gol01

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol01Test(unittest.TestCase):

    def setUp(self):
        self.gol = Gol01(9)
        self.gol.initField([[False, False, False],
                            [False, True, False],
                            [True, True, True]])
        pass

    def tearDown(self):
        pass


    def testSetup(self):
        self.gol = Gol01(10)
        self.assertEqual(len(self.gol.field), 10)
        #assert self.gol.test, 'Test'
        pass

    def test(self):
        self.gol = Gol01(10)
        myArray = [[False, False, False],[False, True, False],[True, True, True]]
        self.gol.initField(myArray)
        self.assertEqual(self.gol.field[1][1], True)
        pass

    def test_num_neighbours11(self):
        self.assertEqual(self.gol.num_neighbours(1,1), 3)

    def test_num_neighbours00(self):
        self.assertEqual(self.gol.num_neighbours(0,0), 1)

    def test_num_neighbours22(self):
        self.assertEqual(self.gol.num_neighbours(2,2), 2)


# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

