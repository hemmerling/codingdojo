#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol01 import Gol01

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol01Test(unittest.TestCase):


    def setUp(self):
        return

    def tearDown(self):
        pass

    def test_set_a_neighbour(self):
        neighbours = 1
        self.gol = Gol01(neighbours)
        assert self.gol.neighbours == 1, 'Gol01.survives() does not provide the right return value'
        return

    def test_survival_with_1_neighbour(self):
        neighbours = 1
        self.gol = Gol01(neighbours)
        assert self.gol.survives() == False, 'Gol01.survives() does not provide the right return value'
        return

    def test_survival_with_2_neighbours(self):
        neighbours = 2
        self.gol = Gol01(neighbours)
        assert self.gol.survives() == True, 'Gol01.survives() does not provide the right return value'
        return

    def test_survival_with_4_neighbours(self):
        neighbours = 4
        self.gol = Gol01(neighbours)
        assert self.gol.survives() == False, 'Gol01.survives() does not provide the right return value'
        return

    def test_born_with_3_neighbours(self):
        neighbours = 3
        self.gol = Gol01(neighbours)
        assert self.gol.born() == False, 'Gol01.born() does not provide the right return value'
        return

    def test_alive_notborn_with_3_neighbours(self):
        neighbours = 3
        alive = False
        self.gol = Gol01(neighbours, alive)
        assert self.gol.born() == True, 'Gol01.born() does not provide the right return value'
        return

    def test_notalive_notsurvives_with_3_neighbours(self):
        neighbours = 3
        alive = False
        self.gol = Gol01(neighbours, alive)
        assert self.gol.survives() == False, 'Gol01.born() does not provide the right return value'
        return

    def test_notalive_notsurvives_with_3_neighbours(self):
        neighbours = 3
        alive = True
        self.gol1 = Gol01(neighbours, alive)
        alive = False
        self.gol2 = Gol01(neighbours, alive)
        assert (self.gol1.is_alive() == True) and \
               (self.gol2.is_alive() == True), 'Gol01.is_alive() does not provide the right return value'
        return

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

