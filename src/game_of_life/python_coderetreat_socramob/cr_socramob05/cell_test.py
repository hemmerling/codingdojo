#This file was originally generated by PyScripter's unitest wizard

import unittest
from cell import Cell
from coordinate import Coordinate

def dummy():
    """ Dummy function for comparison of the return values """
    return

class CellTest(unittest.TestCase):

    
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testCoordinateCreated(self):
        self.coordinate = Coordinate()
        assert self.coordinate.set(1,2) == (1,2), 'Coordinate was created'
        assert self.coordinate.coordX == 1, 'Coordinate was created'
        assert self.coordinate.coordY == 2, 'Coordinate was created'

    def testCellCreated(self):
        coordinate = Coordinate(1,1)
        self.cell = Cell(coordinate)
        assert self.cell.exists() == False, 'Cell was not created'

    def testCellSetValue(self):
        coordinate = Coordinate(1,1)
        self.cell = Cell(coordinate)
        self.cell.setValue(True)
        assert self.cell.value == True, 'Cell has invalid value'

    def testGetNeigbours(self):
        myNeighbourListe = [(0,0), (0,1), (0,2), (1,0), (1,2), (2,0), (2,1), (2,2)]
        coordinate = Coordinate(1,1)
        self.cell = Cell(coordinate)
        generatedNeigbhourListe = self.cell.getNeighbours()
        assert generatedNeigbhourListe == myNeighbourListe, 'Cell has invalid value'

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise
