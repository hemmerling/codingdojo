#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol01 import Gol01
from cell import Cell

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol01Test(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testMain(self):
        self.gol = Gol01()
        assert self.gol.main() == dummy(), 'Gol01.get_size() does not provide the right return value'

        pass

class CellTest(unittest.TestCase):

    def setUp(self):
        self.cell = Cell(True)
        self.cell2 = Cell(True)
        pass

    def tearDown(self):
        pass

    def testCellKnowsItsOwnState(self):
        assert self.cell.is_alive() == True, 'Cell has forgotten that it is alive'
        pass


    def testCellCanHaveNeigbhours(self):
        self.cell.add_neighbour(self.cell2)
        assert self.cell.has_neighbour() == True, 'Cell has no neighbour'
        pass

    def testCellShouldKnowItsCoordinates(self):
        coordinates = [3,5]
        cell = Cell(True, coordinates)
        assert cell.get_x() == 3, 'Cell remembered its x-coordinate incorrectly'
        assert cell.get_y() == 5, 'Cell remembered its y-coordinate incorrectly'


    def testCellCountsNumberOfNeighbours(self):
        assert self.cell.get_number_of_neighbours() == 0, 'Cell has not 0 neighbour'
        self.cell.add_neighbour(self.cell2)
        assert self.cell.get_number_of_neighbours() == 1, 'Cell has not 1 neighbour'
        pass

    def testCellCanDetectWheatherAnotherCellIsNeighboured():
        cellA = Cell(True, [2,2])
        cellB = Cell(True, [3,2])
        cellC = Cell(True, [4,3])
        assert cellA.is_neighboured_to(cellB) == True, 'A Cell has not detected another cell correctly as neighbour'
        assert cellB.is_neighboured_to(cellC) == True
        assert cellA.is_neighboured_to(cellC) == False

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

