#This file was originally generated by PyScripter's unitest wizard

import unittest
from zelle import Zelle
from zellenkultur import ZellenKultur

def dummy():
    """ Dummy function for comparison of the return values """
    return

class ZelleTest(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testZelleHat1Nachbar(self):
        self.zelle = Zelle()
        anzahlNachbarn = 1
        assert self.zelle.ueberlebt(anzahlNachbarn) == False, \
        'zelle.ueberlebt(anzahlNachbarn) does not provide the \
        right return value'
        pass

    def testZelleHat3Nachbarn(self):
        self.zelle = Zelle()
        anzahlNachbarn = 3
        assert self.zelle.ueberlebt(anzahlNachbarn) == True, \
        'zelle.ueberlebt(anzahlNachbarn) does not provide the \
        right return value'
        pass

    def testZelleHat4Nachbarn(self):
        self.zelle = Zelle()
        anzahlNachbarn = 4
        assert self.zelle.ueberlebt(anzahlNachbarn) == False, \
        'zelle.ueberlebt(anzahlNachbarn) does not provide the \
        right return value'
        pass

    def testLebendeZelleHat1Nachbarn(self):
        zelleLebt = True
        self.zelle = Zelle(zelleLebt)
        anzahlNachbarn = 1
        assert self.zelle.ueberlebt(anzahlNachbarn) == False, \
        'zelle.ueberlebt(anzahlNachbarn) does not provide the \
        right return value'
        pass

    def testPit(self):
        zelleLebt = True
        listeDerZellen = []
        zelle1 = Zelle(zelleLebt)
        zelle2 = Zelle(zelleLebt)
        listeDerZellen.append(zelle1)
        listeDerZellen.append(zelle2)
        self.zellenKultur = ZellenKultur(listeDerZellen)
        assert self.zellenKultur.anzahlLebenderZellen() == 2, \
        'zelle.ueberlebt() does not provide the \
        right return value'
        pass

    def testMain(self):
        self.zelle = Zelle()
        assert self.zelle.main() == dummy(), 'Gol01.get_size() does not provide the right return value'
        pass


# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

