#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol01 import Gol01

def dummy():
    """ Dummy function for comparison of the return values """
    return

# tdd = test first
# input -> output
# Ich moechte testen, ob ein Feld 0 Nachbarn hat
# Ich teste die Nachbarn ob sie leben
class Gol01Test(unittest.TestCase):

    # Given
    def setUp(self):
        self.gol = Gol01()
        pass

    def tearDown(self):
        pass

    # When
    # Then
    def testHat0Nachbarn(self):
        assert (self.gol.nachbar(0,0) == False) \
                and (self.gol.nachbar(0,1) == False) \
                and (self.gol.nachbar(0,2) == False) \
                and (self.gol.nachbar(1,0) == False) \
                and (self.gol.nachbar(1,2) == False) \
                and (self.gol.nachbar(2,0) == False) \
                and (self.gol.nachbar(2,1) == False) \
                and (self.gol.nachbar(2,2) == False) \
        , 'Gol01.get_size() does not provide the right return value'
        pass

    def testHat1NachbarnAuf00(self):
        self.gol.setNachbar(0,0)
        assert (self.gol.nachbar(0,0) == True) \
                and (self.gol.nachbar(0,1) == False) \
                and (self.gol.nachbar(0,2) == False) \
                and (self.gol.nachbar(1,0) == False) \
                and (self.gol.nachbar(1,2) == False) \
                and (self.gol.nachbar(2,0) == False) \
                and (self.gol.nachbar(2,1) == False) \
                and (self.gol.nachbar(2,2) == False) \
        , 'Gol01.get_size() does not provide the right return value'
        pass

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

