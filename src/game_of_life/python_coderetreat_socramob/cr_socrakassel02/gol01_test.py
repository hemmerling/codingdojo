#This file was originally generated by PyScripter's unitest wizard

import unittest
from cellarray import CellArray
from cell import Cell
from livingcell import LivingCell
from deadcell import DeadCell

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol01Test(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testDoesCellLiveWith0Neighbours(self):
        self.testcell_list = []
        self.living_cell11 = LivingCell()
        # None, None, None, \
        # self.living_cell11, \
        # None, None, \
        # None, None, None
        self.testcell_list.append(None)
        self.testcell_list.append(None)
        self.testcell_list.append(None)

        self.testcell_list.append(None)
        self.testcell_list.append(self.living_cell11)
        self.testcell_list.append(None)

        self.testcell_list.append(None)
        self.testcell_list.append(None)
        self.testcell_list.append(None)

        #print self.testcell_list

        self.cell_array = CellArray()
        dead_cell = DeadCell()
        result = self.cell_array.nextState(self.testcell_list)
        #print result
        #print type(result)
        #print type(dead_cell)

        assert type(result) == type(dead_cell), \
               'CellArray.nextState() does not provide the right return value'
        pass


# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

