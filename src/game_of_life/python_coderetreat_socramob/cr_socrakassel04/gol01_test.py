#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol01 import Gol01

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol01Test(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testDiesWithNoNeighbours(self):
        self.gol = Gol01()
        neuner = ( (False, False, False), \
                    (False, True, False), \
                    (False, False, False) )
        self.gol.setelements(neuner)
        result = self.gol.nextStep()
        assert result == False, 'Gol01.get_size() does not provide the right return value'
        pass

    def testDiesWith4Neighbours(self):
        self.gol = Gol01()
        neuner = ( (False, True, True), \
                    (False, True, True), \
                    (False, False, True) )
        self.gol.setelements(neuner)
        result = self.gol.nextStep()
        assert result == False, 'Gol01.get_size() does not provide the right return value'
        return

    def testLivesWith3Neighbours(self):
        self.gol = Gol01()
        myself = False
        neuner = ( (False, True, True), \
                    (False, myself, True), \
                    (False, False, False) )
        self.gol.setelements(neuner)
        result = self.gol.nextStep()
        assert result == True, 'Gol01.get_size() does not provide the right return value'
        return

    def testSurvivesWith2Neighbours(self):
        self.gol = Gol01()
        neuner = ( (False, True, True), \
                    (False, True, True), \
                    (False, False, False) )
        self.gol.setelements(neuner)
        result = self.gol.nextStep()
        assert result == True, 'Gol01.get_size() does not provide the right return value'
        return

    def testDiesWith1Neighbour(self):
        self.gol = Gol01()
        neuner = ( (False, False, False), \
                    (False, True, True), \
                    (False, False, False) )
        self.gol.setelements(neuner)
        result = self.gol.nextStep()
        assert result == False, 'Gol01.get_size() does not provide the right return value'
        return

    def testField(self):
        self.gol = Gol01()
        myself = False
        neuner = ( (False, True, True), \
                    (False, myself, True), \
                    (False, False, False) )
        self.gol.set_field(1, 1, neuner)
        new_elements = self.gol.get_field(1, 1)
        print new_elements
        result = self.gol.nextStep()
        assert result == True, 'Gol01.get_size() does not provide the right return value'
        return

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

