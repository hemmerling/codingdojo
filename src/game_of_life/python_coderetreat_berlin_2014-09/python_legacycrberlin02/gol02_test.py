#This file was originally generated by PyScripter's unitest wizard

import unittest
from gol02 import Gol02

def dummy():
    """ Dummy function for comparison of the return values """
    return

class Gol02Test(unittest.TestCase):

    def setUp(self):
        self.gol = Gol02()
        self.gol2 = Gol02()
        self.gol3 = Gol02()
        self.board = []
        self.board.append(self.gol)
        self.board.append(self.gol2)
        self.board.append(self.gol3)
        pass

    def tearDown(self):
        pass

    def testCellShouldDieWithZeroLivingNeighbors(self):
        self.gol.evolve()
        assert self.gol.isLiving() == False, 'Gol02.isLiving() does not provide the right return value'
        pass

    def testCellShouldLiveWith3LivingNeighbors(self):
        self.gol.addNeigbors(3)
        self.gol.evolve()
        assert self.gol.isLiving() == True, 'Gol02.isLiving() does not provide the right return value'
        pass

    def testCellShouldDieWith4LivingNeighbors(self):
        self.gol.addNeigbors(4)
        self.gol.evolve()
        assert self.gol.isLiving() == False, 'Gol02.isLiving() does not provide the right return value'
        pass

    def testCellShouldSurviveWith2LivingNeighbors(self):
        self.gol.setAlive()
        self.gol.addNeigbors(2)
        self.gol.evolve()
        assert self.gol.isLiving() == True, 'Gol02.isLiving() does not provide the right return value'
        pass


    def testCellShouldDieWith1LivingNeighbor(self):
        self.gol.appendNeigbors(self.gol2)
        self.gol.evolve()
        assert self.gol.isLiving() == False, 'Gol02.isLiving() does not provide the right return value'
        pass

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

