#This file was originally generated by PyScripter's unitest wizard

import unittest
import math, random
from gol01 import Gol01

def dummy():
    """ Dummy function for comparison of the return values """
    return

class HaveYouSetupAnArrayBigEnoughTest(unittest.TestCase):

    def setUp(self):
        self.gol = Gol01()
        # W,H,
        # set last element of WxH space setAlive(W,H) and not crash
        self.W = 5
        self.H = 5
        pass

    def tearDown(self):
        pass

    def test_if_space5x5_is_ok(self):
        returnState = self.gol.setAlive(self.W,self.H)
        assert returnState == True, 'Gol01.setAlive() does not provide the right return value'

    def test_if_setup_cell_is_alive(self):
        self.gol.setAlive(5,5)
        returnState = self.gol.isAlive()
        assert returnState == True, 'Gol01.isAlive() does not provide the right return value'

    def test_if_setup_cell_is_dead(self):
        returnState = self.gol.isAlive()
        assert returnState == False, 'Gol01.isAlive() does not provide the right return value'

    def test_cell_will_not_survive_without_neigbhours(self):
        self.gol.setAlive(5,5)
        returnState = self.gol.survives()
        assert returnState == False, 'Gol01.survives() does not provide the right return value'

    def test_random_cell_set_alive(self):
        random_width = math.floor(random.random()*5) # explitic range?
        random_height = math.floor(random.random()*5) # explicit range?
        self.gol.setAlive(random_width,random_height)
        returnState = self.gol.survives()
        assert returnState == True, 'Gol01.survives() does not provide the right return value'

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

