#!/usr/bin/env python
##
#
#  @package pyselenium
#  @file    softwarekammer01.py
#  @author  Rolf Hemmerling
#  @date    2014-05-31
#  @license MIT
#
#  This file was originally generated by PyScripter's unitest wizard
#
""" softwarekammer01.py """


import unittest
from time import sleep
from selenium import webdriver
from selenium import selenium
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException

class Softwerkskammer01Test(unittest.TestCase):
    """ Softwerkskammer01Test """

    def setUp(self):
        """ setUp """
        self.driver = webdriver.Firefox()
        self.addCleanup(self.driver.quit)
        self.base_url = "http://www.softwerkskammer.org/"
        self.seleniumobject = "selenium.webdriver.remote.webelement.WebElement"
        return

    def tearDown(self):
        """ tearDown """
        return

    def xtest_load_url(self):
        """ test_load_url """
        title = u"Willkommen!\xa0- SWK"
        self.driver.get(self.base_url)
        self.assertIn(title, self.driver.title)
        return

    def xtest_find_class(self):
        """ test_find_class """
        my_class1 = "visible-print"
        my_class2 = "dropdown-menu"
        my_class3 = "fa fa-sign-in"
        result = self.driver.find_element_by_class_name(my_class3)
        self.assertIn(self.seleniumobject, str(result))
        return

    def xtest_use_xpath_to_follow_a_link1(self):
        """ test_use_xpath_to_follow_a_link """
        my_xpath1 = "//*/a[@href='/announcements/800members']"
        self.driver.get(self.base_url)
        result = self.driver.find_elements_by_xpath(my_xpath1)
        result[0].click()
        self.assertIn(self.seleniumobject, str(result))
        sleep(10)
        return

    def test_call_login(self):
        """ test_call_login """
        my_xpath1 = "//*/[@i class='fa fa-sign-in']"
        self.driver.get(self.base_url)
        result = self.driver.find_elements_by_xpath(my_xpath1)
        result[0].click()
        self.assertIn(self.seleniumobject, str(result))
        sleep(10)
        return

    def xtest_find_css(self):
        """ test_find_css """
        self.driver.get(self.base_url)
        my_css1 = \
                 'navbar.navbar-default.navbar-fixed-top.hidden-print.hidden-xs'
        my_css1 = \
                 'navbar'
        result = self.driver.find_element_by_css_selector(my_css1)
        #result = self.driver.find_element_by_class_name(my_css1)
        print result
        self.assertIn(self.seleniumobject, str(result))

        #new_relative_url = "/announcements/800members"
        #new_css_selector = "a href="+new_relative_url
        #new_css_selector = "800 Mitglieder"
        #print new_css_selector
         #self.driver.find_element_by_xpath(new_url).click()
        #self.driver.find_element_by_css_selector(new_css_selector).click();
        #self.assertIn(title, self.browser.title)

        #login_form = self.browser.find_element_by_id('loginForm')
        #username = self.browser.find_element_by_name('username')
        #password = self.browser.find_element_by_name('password')
        #continue_link = self.browser.find_element_by_link_text('Continue')
        #continue_link = self.browser.find_element_by_partial_link_text('Conti')
        #try:
        #    business_link1 = self.browser.find_element_by_link_text(
        #                    business)
        #except NoSuchElementException:
        #    print "Link-Text 'Business' nicht gefunden"

        #try:
        #    business_link2 = self.browser.find_element(By.CSS_SELECTOR("a[href*='en:business.html']"))
        #    #.get_attribute('href')
        #    print "blink2=", business_link2
        #except NoSuchElementException:
        #    print "Tag href nicht gefunden"
        #print business_link
        #newUrl = self.base_url+ enPrefix+businessPagename
        #print newUrl
        #self.browser.get(newUrl)
        sleep(10)
        return

# run all tests
if __name__ == "__main__":
    try:
        unittest.main()
    except SystemExit as inst:
        if inst.args[0] is True: # raised by sys.exit(True) when tests failed
            raise

